# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    # - name: Env Detect
    #   run: ls /boot && exit 1
    - name: Install Deps
      # Install Deps
      run: sudo apt install -y linux-image-$(uname -r) linux-modules-$(uname -r) linux-modules-extra-$(uname -r)
    - name: Install Deps 2
      run: sudo apt install -y git libtool libtool-bin libyaml-dev ed libreadline-dev libsnmp-dev mpi-default-dev module-assistant quilt libncurses5-dev libncurses-dev bison flex gnupg libelf-dev gcc libssl-dev bc bzip2 build-essential udev kmod cpio libfuse-dev libattr1-dev libblkid-dev uuid-dev devscripts fakeroot kernel-wedge libudev-dev libpython3-dev swig gettext texinfo debhelper dh-exec update-notifier-common sg3-utils attr mpi-default-bin selinux-utils 
      # python python2 python2-minimal python2.7 libpython2-stdlib libsgutils2-2 libpython2.7-stdlib python2.7-minimal libpython2.7-minimal
      # dpatch
    - name: Install Kernel Source
      run: sudo apt install -y kernel-devel-$(uname -r) kernel-source-$(uname -r)
     #- name: Install Kernel Source
     # run: cd /tmp && sudo dpkg -i linux-source-5.4.0_5.4.0-62.70_all.deb && ls /usr/src && sudo bzip2 -d /usr/src/linux-source-5.4.0/linux-source-5.4.0.tar.bz2

    - name: Configure Kernel config file
      run: cp /boot/config-6.8.0-1017-azure /usr/src/$(uname -r)/.config

    - name: Compile Kernel
      run: cd /usr/src/$(uname -r)/ && ls && make -j $(nproc)
      # $ sudo wget http://ports.ubuntu.com/pool/main/l/linux/linux-source-5.4.0_5.4.0-62.70_all.deb
      # $ sudo dpkg -i linux-source-5.4.0_5.4.0-62.70_all.deb
      # $ sudo tar xjf /usr/src/linux-source-5.4.0/linux-source-5.4.0.tar.bz2
    - name: AutoGen
      # Build your program with the given configuration
      run: sh ${{github.workspace}}/autogen.sh
     
    - name: Configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: ${{github.workspace}}/configure

 
    - name: Build
      # Build your program with the given configuration
      run: make

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: make test

